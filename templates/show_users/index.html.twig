{% extends 'baseback.html.twig' %}

{% block body %}
<style>
    /* Center-align the table */
    table {
        width: 80%; /* Adjust the width as needed */
        margin: 0 auto; /* Center-align the table horizontally */
        border-collapse: collapse;
    }

    th, td {
        padding: 8px;
        border-bottom: 1px solid #ddd; /* Add border between table rows */
        text-align: left; /* Align text to the left within table cells */
    }

    th {
        background-color: #f2f2f2; /* Add background color to table header */
    }

    .delete-btn, .ban-btn, .unban-btn {
        background-color: #f44336; /* Red color for delete button */
        color: white;
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 5px;
    }

    .delete-btn:hover, .ban-btn:hover, .unban-btn:hover {
        background-color: #d32f2f; /* Darker red color on hover */
    }

    /* Move the table to the right */
    @media only screen and (min-width: 768px) {
        table {
            margin-left: auto;
        }
    }

    /* Increase the size of the search input */
    #searchForm {
        text-align: center; /* Center-align the search form */
    }

    #searchInput {
        width: 80%; /* Set the width to 80% to control the size */
        padding: 10px; /* Add padding to increase height */
        box-sizing: border-box; /* Include padding and border in the element's total width and height */
        font-size: 16px; /* Adjust font size */
    }

    /* Style for the button */
    #sortByAgeButton {
        display: block; /* Display the button as a block-level element */
        margin: 10px auto; /* Center-align the button horizontally with some margin */
    }
     #exportCsvButton {
        display: block;
        margin: 15px auto; 
    }
 .pagination-controls {
    position: fixed;
    top: 200px;
    right: 200px;
}

</style>
<section id="main-content" class=" ">
        <section class="wrapper main-wrapper" style=''>
            <div class='col-xl-12 col-lg-12 col-md-12 col-12'>

<h1 style="text-align: center;">All Users</h1>

<!-- Search form -->
<form id="searchForm">
    <input type="text" id="searchInput" onkeyup="searchUsers()" placeholder="Search for users...">
</form>

<button id="sortByAgeButton" onclick="sortByAge()">Sort by Age</button> <!-- Button for sorting by age -->
<button id="exportCsvButton" onclick="exportUsersCsv()">Export Users to CSV</button>


<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Nom</th>
            <th>Prénom</th>
            <th>Région</th>
            <th>Email</th>
            <th>Age</th>
            <th>Action</th> <!-- Added column for buttons -->
        </tr>
    </thead>
    <tbody id="userTableBody">
        {% for user in pagination %}
            <tr>
                <td>{{ user.id }}</td>
                <td>{{ user.nom }}</td>
                <td>{{ user.prenom }}</td>
                <td>{{ user.region }}</td>
                <td>{{ user.email }}</td>
                <td>{{ user.age }}</td>
                <td>
                    <button class="delete-btn" onclick="deleteUser({{ user.id }})">Delete</button>
                    {% if user.isBanned %}
                        <button class="unban-btn" onclick="unbanUser({{ user.id }})">Unban</button>
                    {% else %}
                        <button class="ban-btn" onclick="banUser({{ user.id }})">Ban</button>
                    {% endif %}
                </td>
            </tr>
        {% endfor %}
    </tbody>
</table> </div>


        </section>
    </section>

<div class="pagination-controls">
    {{ knp_pagination_render(pagination) }}
</div>
<!-- JavaScript function to handle delete operation -->
<script>
  function exportUsersCsv() {
        // Redirect to the export users CSV route
        window.location.href = '{{ path('export_users_csv') }}';
    }
    function deleteUser(userId) {
        if (confirm("Are you sure you want to delete this user?")) {
            // Make an AJAX request to delete the user
            fetch(`/delete/user/${userId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    console.log(`User with ID ${userId} deleted successfully`);
                    location.reload();
                } else {
                    console.error('Error deleting user');
                }
            })
            .catch(error => {
                console.error('Error deleting user:', error);
            });
        }
    }

    function banUser(userId) {
        if (confirm("Are you sure you want to ban this user?")) {
            // Make an AJAX request to ban the user
            fetch(`/ban/user/${userId}`, {
                method: 'POST'
            })
            .then(response => {
                if (response.ok) {
                    console.log(`User with ID ${userId} banned successfully`);
                    location.reload();
                } else {
                    console.error('Error banning user');
                }
            })
            .catch(error => {
                console.error('Error banning user:', error);
            });
        }
    }

    function unbanUser(userId) {
        if (confirm("Are you sure you want to unban this user?")) {
            fetch(`/unban/user/${userId}`, {
                method: 'POST'
            })
            .then(response => {
                if (response.ok) {
                    console.log(`User with ID ${userId} unbanned successfully`);
                    location.reload();
                } else {
                    console.error('Error unbanning user');
                }
            })
            .catch(error => {
                console.error('Error unbanning user:', error);
            });
        }
    }
    function searchUsers() {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("searchInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("userTableBody");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those that don't match the search query
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td");
            for (var j = 0; j < td.length; j++) {
                if (td[j]) {
                    txtValue = td[j].textContent || td[j].innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";
                        break;
                    } else {
                        tr[i].style.display = "none";
                    }
                }
            }
        }
    }

    function sortByAge() {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementById("userTableBody");
        switching = true;
        while (switching) {
            switching = false;
            rows = table.rows;
            for (i = 0; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = parseInt(rows[i].getElementsByTagName("td")[5].innerText);
                y = parseInt(rows[i + 1].getElementsByTagName("td")[5].innerText);
                if (x > y) {
                    shouldSwitch = true;
                    break;
                }
            }
            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }
    }
</script>
{% endblock %}
